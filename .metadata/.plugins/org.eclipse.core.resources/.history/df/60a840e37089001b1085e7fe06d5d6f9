import 'PetriNet.ecore'

package petrinet

context PetriElement
def: petrinet(): PetriNet =
	PetriNet.allInstances()
		->select(n | n.petriElements -> includes(self))
		->asSequence()->first()
	
context PetriNet
inv validPetriNetName('Invalid PetriNet name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context Arc
inv validPosition('Arc should be between Place and Transition'):
	(self.source.oclIsKindOf(Place)
	 and self.target.oclIsKindOf(Transition))
	 or (self.target.oclIsKindOf(Place)
	 and self.source.oclIsKindOf(Transition))
	 
context Arc
inv hasStrictPositiveWeight('Arc weight should be strictly positive'):
	self.weight > 0
	
context Arc
inv sourceAndTargetInSamePetriNet('Arc source and target should belong to the same PetriNet than the Arc'):
	self.source.petrinet() = self.petrinet() and self.target.petrinet() = self.petrinet()

context Arc
inv arcFromTransitionIsNotReadArc('An Arc from a Transition cannot be a readArc'):
	not (self.source.oclIsKindOf(Transition) and self.isReadArc)	

context Place
inv hasPositiveMarking('Place marking should be positive'):
	self.marking >= 0
	
context Node
inv validNodeName('Invalid Node name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context Place
inv validPlaceName('Invalid Place name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context Node
inv uniqueName('Node name ' + self.name + ' already exists'):
	self.petrinet().petriElements
		->select(e | e.oclIsKindOf(Node))
		->collect(e | e.oclAsType(Node))
		->isUnique(name)

context Node
inv allIncomingArcsAreUnique('All incomings Arcs should be unique for a Node'):
	self.incoming->forAll(a1,a2 : Arc | a1 <> a2)
	
context Node
inv allOutgoingArcsAreUnique('All outcomings Arcs should be unique for a Node'):
	self.outgoing->forAll(a1,a2 : Arc | a1 <> a2)
		
endpackage
