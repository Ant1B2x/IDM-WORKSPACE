module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElement->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				marking <- 1,
				petrinet <- wd.getProcess()
		),
		p_in_progress: petrinet!Place(
			name <- wd.name + '_in_progress',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		p_started: petrinet!Place(
			name <- wd.name + '_started',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		p_finished: petrinet!Place(
			name <- wd.name + '_finished',
			marking <- 0,
			petrinet <- wd.getProcess()
		),
		-- TRANSITIONS d'une WorkDefinition
		t_start: petrinet!Transition(
			name <- wd.name + '_start',
			petrinet <- wd.getProcess()
		),
		t_finish: petrinet!Transition(
			name <- wd.name + '_finish',
			petrinet <- wd.getProcess()
		),
		-- ARCS d'une WorkDefinition
		a_start: petrinet!Arc(
			weight <- 1,
			isReadArc <- false,
			source <- p_ready,
			destination <- t_start,
			petrinet <- wd.getProcess()
		),
		a_in_progress: petrinet!Arc(
			weight <- 1,
			isReadArc <- false,
			source <- t_start,
			destination <- p_in_progress,
			petrinet <- wd.getProcess()
		),
		a_started: petrinet!Arc(
			weight <- 1,
			isReadArc <- false,
			source <- t_start,
			destination <- p_started,
			petrinet <- wd.getProcess()
		),
		a_finish: petrinet!Arc(
			weight <- 1,
			isReadArc <- false,
			source <- p_in_progress,
			destination <- t_finish,
			petrinet <- wd.getProcess()
		),
		a_finished: petrinet!Arc(
			weight <- 1,
			isReadArc <- false,
			source <- t_finish,
			destination <- p_finished,
			petrinet <- wd.getProcess()
		)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	-- aws => arc work sequence
	to aws: petrinet!Arc(
		isReadArc <- true,
		weight <- 1,
		source <- thisModule.resolveTemp(
			ws.predecessor,
			if((ws.linkType = #startToStart) or (ws.linkType = #startToFinish))
				then 'p_started'
				else 'p_finished'
				endif
			),
		destination <- thisModule.resolveTemp(
			ws.successor,
			if((ws.linkType = #startToStart) or (ws.linkType = #finishToStart))
				then 't_start'
				else 't_finish'
				endif
			),
		petrinet <- ws.getProcess()
		)
}

rule Ressource2PetriNet {
	from res: simplepdl!Ressource
	to p_res: petrinet!Place(
				name <- res.name,
				marking <- res.nbRessourceDisponlible,
				petrinet <- res.getProcess()
		)
}


rule Besoin2PetriNet {
	from need: simplepdl!Besoin
	to 
	a_get: petrinet!Arc(
		weight <- need.nbRessource,
		isReadArc <- false,
		source <- need.ressource,
		destination <- thisModule.resolveTemp(
			need.workdefinition,
			't_start'),
		petrinet <- need.ressource.getProcess()
	),
	a_give: petrinet!Arc(
		weight <- need.nbRessource,
		isReadArc <- false,
		source <- thisModule.resolveTemp(
			need.workdefinition,
			't_finish'),
		destination <- need.ressource,
		petrinet <- need.ressource.getProcess()
	)
}