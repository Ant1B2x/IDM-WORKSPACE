import 'SimplePDL.ecore'

package simplepdl

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context Process
inv validProcessName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process: '
	+ self.predecessor.name + ' in ' + self.predecessor.process().name + ' and '
	+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()
	
context WorkSequence
inv notReflexiveSuccessor(
	'Successor (' + self.successor.name + ') and predecessor (' + self.predecessor.name + ') are the same'
):
	self.predecessor <> self.successor
	
context WorkDefinition
inv uniqueWorkDefinitionName('WorkDefinition name ' + self.name + ' already exists'):
	self.process().processElements
	->select(e | e.oclIsKindOf(WorkDefinition))
	->collect(e | e.oclAsType(WorkDefinition))
	->isUnique(name)

context Resource
inv hasOneOrMoreNbResources('Resource property "nbAvailableResources" should be greater or equal to 1: ' + self.name):
	self.nbAvailableResources >= 1

context Resource
inv uniqueResourceName('Resource name ' + self.name + ' already exists'):
	self.process().processElements
	->select(e | e.oclIsKindOf(Resource))
	->collect(e | e.oclAsType(Resource))
	->isUnique(name)

context Need
inv correctNeededNbResources('A WorkDefinition cannot need less than 1 or more than "nbAvailableResources" Resources: ' + self.resource.name + ' for ' + self.workdefinition.name):
	self.nbResources >= 1 and self.nbResources <= self.resource.nbAvailableResources

context Need
inv resourceAndWorkDefinitionInSameProcess('Needed Resource and WorkDefinition not in the same process: ' + self.resource.name + ' for ' + self.workdefinition.name):
	self.resource.process() = self.workdefinition.process()

context WorkDefinition
inv noRedundantNeed('Two needs with the same resource should not exist for the same WorkDefinition'):
	--self.need.forAll(n1,n2 : Need | n1.resource <> n2.resource)
	self.need.forAll(n1 | n1.resource.name = 'Ok')

-- Chaque ressource utilisée pour une activité doit être unique. On ne peut
-- effectivement pas utiliser deux fois la même ressources en même temps pour la
-- même activité.

-- (Pour chaque ressource, on s’assure qu’elle existe en quantité non négative et que
-- son type soit unique.)

-- On s’assure enfin que chaque WorkDefinition ayant besoin d’une ressource en
-- requiert une quantité positive ET au plus la quantité déclarée dans la ressource
-- concernée.

endpackage
