import 'SimplePDL.ecore'

package simplepdl

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context Process
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process: '
	+ self.predecessor.name + ' in ' + self.predecessor.process().name + ' and '
	+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()
	
context WorkSequence
inv notReflexiveSuccessor(
	'Successor (' + self.successor.name + ') and predecessor (' + self.predecessor.name + ') are the same '
):
	self.predecessor <> self.successor
	
context WorkDefinition
inv uniqueName('Name "' + self.name + '" already exists.'):
	self.process().processElements
	->select(e | e.oclIsKindOf(WorkDefinition))
	->collect(e | e.oclAsType(WorkDefinition))
	->isUnique(name)

-- Chaque ressource utilisée pour une activité doit être unique. On ne peut
-- effectivement pas utiliser deux fois la même ressources en même temps pour la
-- même activité.

-- La quantité de ressources disponibles pour une ressource doit être supérieure à 1.

-- Pour chaque ressource nécessaire à une activité (RessourceNeeded), il faut que la
-- quantité nécessaire de cette ressource soit supérieure à 1 tout en étant inférieur à sa
-- quantité disponible.

-- Enfin, pour chaque RessourceNeeded, la ressource demandée et l’activité
-- correspondante doivent se trouver dans le même processus que celle-ci.

-- (Pour chaque ressource, on s’assure qu’elle existe en quantité non négative et que
-- son type soit unique.)

-- On s’assure enfin que chaque WorkDefinition ayant besoin d’une ressource en
-- requiert une quantité positive ET au plus la quantité déclarée dans la ressource
-- concernée.

endpackage
